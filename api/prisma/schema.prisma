generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model users {
  id                Int       @id @default(autoincrement())
  email             String    @unique
  password          String
  refresh_token     String?
  two_factor_secret String?
  role              String    @default("member")
  created_at        DateTime? @default(now())
  updated_at        DateTime? @default(now())
  books             Book[]
}

model Book {
  id          Int         @id @default(autoincrement())
  user_id     Int
  title       String
  description String?
  genre       String?
  status      String?
  created_at  DateTime    @default(now())
  user        users       @relation(fields: [user_id], references: [id])
  chapters    Chapter[]
  characters  Character[]
  mapItems    MapItem[]
  stat        Stat?

  @@index([user_id], map: "Book_user_id_fkey")
}

model Chapter {
  id          Int       @id @default(autoincrement())
  book_id     Int
  title       String
  content     String?
  order_index Int       @default(0)
  updated_at  DateTime  @default(now())
  book        Book      @relation(fields: [book_id], references: [id])
  comments    Comment[]
  notes       Note[]

  @@index([book_id], map: "Chapter_book_id_fkey")
}

model Note {
  id            Int      @id @default(autoincrement())
  chapter_id    Int
  content       String
  line_position Int?
  created_at    DateTime @default(now())
  chapter       Chapter  @relation(fields: [chapter_id], references: [id])

  @@index([chapter_id], map: "Note_chapter_id_fkey")
}

model Comment {
  id         Int      @id @default(autoincrement())
  chapter_id Int
  content    String
  created_at DateTime @default(now())
  chapter    Chapter  @relation(fields: [chapter_id], references: [id])

  @@index([chapter_id], map: "Comment_chapter_id_fkey")
}

model Character {
  id                   Int     @id @default(autoincrement())
  book_id              Int
  name                 String
  alias                String?
  gender               String?
  age                  Int?
  physical_description String?
  backstory            String?
  role                 String?
  relations            String?
  book                 Book    @relation(fields: [book_id], references: [id])

  @@index([book_id], map: "Character_book_id_fkey")
}

model MapItem {
  id          Int         @id @default(autoincrement())
  book_id     Int
  type        MapItemType
  name        String
  x           Float
  y           Float
  description String?
  book        Book        @relation(fields: [book_id], references: [id])

  @@index([book_id], map: "MapItem_book_id_fkey")
}

model Stat {
  id           Int       @id @default(autoincrement())
  book_id      Int       @unique
  word_count   Int       @default(0)
  letter_count Int       @default(0)
  total_goal   Int?
  weekly_goal  Int?
  deadline     DateTime?
  book         Book      @relation(fields: [book_id], references: [id])
}

enum MapItemType {
  city
  place
  route
}
